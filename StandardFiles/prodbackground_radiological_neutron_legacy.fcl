#include "services_dune.fcl"
#include "dune_radiological_model.fcl"

BEGIN_PROLOG

larfd_neutron:

{
  module_type:           "RadioGen"
  Nuclide:               ["Concrete_DUNE10MeV", "Concrete_DUNE10MeV", "Concrete_DUNE10MeV", "Concrete_DUNE10MeV", "Concrete_DUNE10MeV", "Concrete_DUNE10MeV" ]
  Material:              [".*",".*",".*",".*",".*",".*"]
  BqPercc:               [ 0.0000076, 0.0000076, 0.0000076, 0.0000076, 0.0000076, 0.0000076 ]
  X0:                    [      837.,     -837.,     -836.,     -836.,     -836.,     -836. ]
  X1:                    [      836.,     -836.,      836.,      836.,      836.,      836. ]
  Y0:                    [      826.,      826.,     -738.,      827.,      826.,      826. ]
  Y1:                    [     -737.,     -737.,     -737.,      826.,     -737.,     -737. ]
  Z0:                    [     -382.,     -382.,     -382.,     -382.,     -383.,     5980. ]
  Z1:                    [     5980.,     5980.,     5980.,     5980.,     -382.,     5981. ]
  T0:                    [ -2246000., -2246000., -2246000., -2246000., -2246000., -2246000. ]
  T1:                    [  2246000.,  2246000.,  2246000.,  2246000.,  2246000.,  2246000. ]
}

END_PROLOG

process_name: MARLEYGen

services:
{
  TFileService:          { fileName: "prodradiological_hist.root" }
  TimeTracker:           {}
  #MemoryTracker:         { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {}                 # ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
                        @table::dunefd_services
}

source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   10          # Number of events to create
  firstRun:    20000047           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

physics:
{
  producers:
  {
    cNeutronGen: @local::larfd_neutron
    rns:       { module_type: "RandomNumberSaver" }
  }

  simulate:      [ rns, cNeutronGen ]
  stream1:       [ out1 ]
  trigger_paths: [ simulate ]
  end_paths:     [ stream1 ]
}

outputs:
{
  out1:
  {
    module_type: RootOutput
    fileName:    "prodradiological_neutron_legacy_larfd_gen.root"
    dataTier:    "generated"
    compressionLevel: 1
  }
}

services.Geometry.GDML: "larfd_rn1cm_v1.gdml"