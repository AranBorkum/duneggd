#include "services_dune.fcl"
#include "dune_radiological_model.fcl"

BEGIN_PROLOG

larfd_neutron:

{
 module_type:           "RadioGen"
 Nuclide:               ["Concrete_DUNE10", "Concrete_DUNE10", "Concrete_DUNE10", "Concrete_DUNE10", "Concrete_DUNE10", "Concrete_DUNE10" ]
 Material:              [".*",".*",".*",".*",".*", ".*"]
 BqPercc:               [ 0.0000076, 0.0000076, 0.0000076, 0.0000076, 0.0000076, 0.0000076 ]
 X0:                    [  -990.0,  -990.0,  -991.0,   990.0,  -990.0, -990.0  ]  
 X1:                    [   990.0,   990.0,  -990.0,   991.0,   990.0,  990.0  ]
 Y0:                    [  -889.0,  1428.0,  -888.0,  -888.0,  -888.0, -888.0  ]
 Y1:                    [  -888.0,  1429.0,  1428.0,  1428.0,  1428.0, 1428.0  ]
 Z0:                    [  -536.0,  -536.0,  -536.0,  -536.0, 14534.0, -537.0  ]
 Z1:                    [ 14534.0, 14534.0, 14534.0, 14534.0, 14535.0, -536.0  ]
 T0:                    [ -2246000., -2246000.,-2246000.,-2246000.,-2246000.,-2246000 ] # ending time in ns
 T1:                    [  2246000.,  2246000., 2246000., 2246000., 2246000., 2246000 ] # ending time in ns
}

END_PROLOG

process_name: MARLEYGen

services:
{
  TFileService:          { fileName: "prodradiological_hist.root" }
  TimeTracker:           {}
  #MemoryTracker:         { ignoreTotal: 1 } # default is one
  RandomNumberGenerator: {}                 # ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
                        @table::dunefd_services
}

source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   10          # Number of events to create
  firstRun:    20000047           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

physics:
{
  producers:
  {
    cNeutronGen: @local::larfd_neutron      #Originally use for K40 in Field Cage. Now repurposed  for Neutrons from concrete.
    rns:       { module_type: "RandomNumberSaver" }
  }
 
  # simulate:      [ rns, ar39Gen, ar42Gen, apaGen, cNeutronGen, cpaGen, kr85Gen, rn222Gen, po210Gen ]
  # simulate:      [ rns, ar39Gen, apaGen, cNeutronGen, cpaGen, kr85Gen, rn222Gen, po210Gen ]
  simulate:	 [ rns, cNeutronGen ]
  stream1:       [ out1 ]
  trigger_paths: [ simulate ] 
  end_paths:     [ stream1 ]  
}

outputs:
{
  out1:
  {
    module_type: RootOutput
    fileName:    "prodradiological_neutron_larfd_gen.root" # Default file name, can override from command line with -o or --output
    dataTier:    "generated"
    compressionLevel: 1
  }
}

services.Geometry.GDML: "larfd.gdml"
