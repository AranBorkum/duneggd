
[STPlaneTarget]
class = duneggd.fgt.STPlane.STPlaneBuilder
strawThickness = Q('0.0065cm') 
sTube_innerDia = Q('0.95cm')
sTube_outerDia = sTube_innerDia + 2*strawThickness
sTube_length   = Q('350cm')
sAnodeWire_Dia = Q('0.003cm')
stPlaneMat     = 'Air'
strawMat       = 'fibrous_glass'
stGas          = 'stGas_Ar'

[STPlaneRadiator]
class = duneggd.fgt.STPlane.STPlaneBuilder
strawThickness = {STPlaneTarget:strawThickness} 
sTube_innerDia = {STPlaneTarget:sTube_innerDia}
sTube_outerDia = {STPlaneTarget:sTube_outerDia}
sTube_length   = {STPlaneTarget:sTube_length}
sAnodeWire_Dia = {STPlaneTarget:sAnodeWire_Dia}
stPlaneMat     = {STPlaneTarget:stPlaneMat}
strawMat       = {STPlaneTarget:strawMat}
stGas          = 'stGas_Xe'

[TargetPlaneArgon] # still think about volume names, reco will eventually want these target tubes
class = duneggd.fgt.Target.TargetPlaneBuilder
targetMat       = 'ArgonTarget'
tubeThickness   = {STPlaneTarget:strawThickness} # for now, will depend on target
tTube_length    = {STPlaneTarget:sTube_length}   # for now, will be shorter
tTube_outerDia  = Q('0.5in')                     # is this inner or outer? ovlp problem when inner.
tTube_innerDia  = tTube_outerDia - 2*tubeThickness
tTube_interval  = Q('0.505in')
nTubesPerTarget = 275

[Radiator]
class = duneggd.fgt.Radiator.RadiatorBuilder
radFoilMat      = 'C3H6'
spacerMat       = 'Fabric'
foilThickness   = Q('0.004cm')
spacerThickness = Q('0.025cm')
radFoilDim = [ {STPlaneTarget:sTube_length}, {STPlaneTarget:sTube_length}, foilThickness]
spacerDim  = [ {STPlaneTarget:sTube_length}, {STPlaneTarget:sTube_length}, spacerThickness]
nFoilsPerRadiator = 60

[STT]
subbuilders = ['STPlaneTarget', 'STPlaneRadiator', 'TargetPlaneArgon', 'Radiator']
class = duneggd.fgt.STT.STTBuilder
sttMat     = 'Air'
#sttDim defined at construction based off of STPlane parameters
nRadiatorModules = 46
nTargetModules = 36


#[SBPlane]
#class = duneggd.fgt.SBPlane.SBPlaneBuilder
#nScintBarsPerPlane = 
#scintBarDim = [x,y,z]
#scintBar_spacing = 

#[ECAL]
#subbuilders = ['SBPlane']
#class = duneggd.fgt.ECAL.ECALBuilder
#ecalMat  = 'Air'
#scintMat = 'Scintillator'


[RPCMod]
class = duneggd.fgt.RPCMod.RPCModBuilder
rpcModDim    =[Q('200cm'),Q('100cm'),Q('1.5cm')]
resiplateDim =[Q('196cm'),Q('96cm'),Q('0.8cm')]
stripDim     =[Q('0.765cm'),Q('0.75cm'),Q('0.35cm')]
gas_thicknes =Q('0.2cm')
rpcModMat    ='Air'
resiplateMat ='fib_glass'
gasMat       ='stGas_Ar'
rpcReadoutMat='fib_glass'


# There are 4 different Tray configurations
#[RPCTray_End]
#subbuilders = ['RPCMod']
#class = duneggd.fgt.RPCTray.RPCTrayBuilder

#[RPCTray_BarSmall]
#subbuilders = ['RPCMod']
#class = duneggd.fgt.RPCTray.RPCTrayBuilder

#[RPCTray_BarMid]
#subbuilders = ['RPCMod']
#class = duneggd.fgt.RPCTray.RPCTrayBuilder

#[RPCTray_BarBig]
#subbuilders = ['RPCMod']
#class = duneggd.fgt.RPCTray.RPCTrayBuilder


[MuIDBarrel]
#subbuilders = ['RPCTray_BarSmall','RPCTray_BarMid','RPCTray_BarBig']
class = duneggd.fgt.MuIDBarrel.MuIDBarrelBuilder
muidInDim  = [ Q('5.7m'), Q('5.7m'), Q('9.2m') ]  # outer dim of magnet
muidOutDim = [ Q('6.7m'), Q('6.7m'), Q('10.2m') ] # wild guess on z, look for a source

[MuIDUpstream]
#subbuilders = ['RPCTray_End']
class = duneggd.fgt.MuIDEnd.MuIDEndBuilder
muidDim = [ Q('6m'), Q('6m'), Q('1m') ]
nTraysPerPlane = 3
nPlanes = 3

[MuIDDownstream]
#subbuilders = ['RPCTray_End']
class = duneggd.fgt.MuIDEnd.MuIDEndBuilder
muidDim = [ Q('6m'), Q('6m'), Q('1m') ]
nTraysPerPlane = {MuIDUpstream:nTraysPerPlane}
nPlanes = 5

[Detector]
subbuilders = ['STT', 'MuIDBarrel', 'MuIDDownstream', 'MuIDUpstream']
class = duneggd.fgt.Detector.DetectorBuilder
magInDim = [Q('4.5m'),Q('4.5m'),Q('8m')]
magThickness = Q('60cm')


[DetEnclosure]
subbuilders = ['Detector']
class = duneggd.fgt.DetEnc.DetEncBuilder
detEncDim = [Q('50m'),Q('50m'),Q('50m')]
 # Can't do {Detector:detDim[1]} since the bound box is calculated at construct
encBoundToDet = [ 0.5*detEncDim[0],
	      	  0.5*detEncDim[1],
		  Q('10m') ]
detEncMat = 'Air'

[World]
subbuilders = ['DetEnclosure']
class = duneggd.fgt.World.WorldBuilder
worldMat = 'Rock'
worldDim = [Q('100m'),Q('100m'),Q('100m')]

